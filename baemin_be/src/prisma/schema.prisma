generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String  @unique @db.VarChar(50)
  foods foods[]
}

model foods {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @db.VarChar(100)
  description String?
  price       Decimal       @db.Decimal(10, 2)
  stock       Int?          @default(0)
  category_id String?       @db.Uuid
  categories  categories?   @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_items order_items[]
}

model users {
  id       Int      @id @default(autoincrement())
  email    String   @unique @db.VarChar(255)
  password String   @db.VarChar(255)
  orders   orders[]
}

model order_items {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id String  @db.Uuid
  food_id  String  @db.Uuid
  quantity Int     @default(1)
  price    Decimal @db.Decimal(10, 2)
  foods    foods   @relation(fields: [food_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders   orders  @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     Int
  status      String?       @default("pending") @db.VarChar(50)
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  updated_at  DateTime?     @default(now()) @db.Timestamp(6)
  order_items order_items[]
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
